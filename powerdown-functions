#!/usr/bin/env bash
# powerdown-functions

# turn on kernel options
opt() {
  [[ -f $1 ]] || return
  echo $2 | tee $1 &>/dev/null || echo "[powerdown] cannot write $2 to $1"
}

# unload kernel module
unload_mod() {
  has_mod $1 || return
  mod_loaded $1 || return
  rmmod -w $1 &>/dev/null || echo "[powerdown] cannot unload module $1"
}

# load kernel module
load_mod() {
  has_mod $1 || return
  mod_loaded $1 && return
  modprobe $1 &>/dev/null || echo "[powerdown] cannot load module $1"
}

# module exists
has_mod() {
  modinfo $1 &>/dev/null
  return $?
}

# module loaded
mod_loaded() {
  [[ $(lsmod | cut -f 1 -d " " | grep "^$1$") != "" ]] && return 0 || return 1
}

# command
run() {
  $@ &> /dev/null || echo "[powerdown] cannot run $@"
}

# get current power usage
display_power() {
  for bat in /sys/class/power_supply/BAT*; do
    if [[ -f $bat/power_now ]]; then
      watt=$(echo "scale=3;$(cat $bat/power_now)/1000000" | bc)
    else
      watt=$(echo "scale=3;$(cat $bat/current_now)/1000000" | bc)
    fi
    echo "[powerdown] $(basename $bat) using $watt watts"
  done
  if [[ -f /usr/bin/acpi ]]; then
    acpi
  fi
}

# get readahead
display_readahead() {
  echo " -> $1 readahead: $(blockdev --getra $1)"
}

# dump kernel option content
dump () {
  [[ -w $1 && -r $1 ]] || return
  echo " -> $1: $(cat $1)"
}

display_module() {
  has_mod $1 || return
  echo -n " -> $1 "
  mod_loaded $1 && echo "loaded" || echo "not loaded"
}

display_wireless() {
  control=$(iwconfig $1 | grep "Power Management" | cut -d : -f 2)
  echo " -> $1 power management: $control"
}

hibernate_offset() {
  filefrag -v /hibernate | awk '{print $3}' | awk 'NR==4'
}

root_partion() {
  df / | awk '{print $1}' | awk 'NR==2'
}

resume_boot_option() {
  echo "'resume=$(root_partion) resume_offset=$(hibernate_offset)'"
}
