#!/usr/bin/env bash
# powerdown-functions

# turn on kernel options
opt() {
  [[ -f "$1" ]] || return
  echo "$2" | tee "$1" &>/dev/null || echo "[powerdown] cannot write $2 to $1"
}

# unload kernel module
unload_mod() {
  has_mod "$1" || return
  mod_loaded "$1" || return
  modprobe -r "$1" &>/dev/null || echo "[powerdown] cannot unload module $1"
}

# load kernel module
load_mod() {
  has_mod "$1" || return
  mod_loaded "$1" && return
  modprobe "$1" &>/dev/null || echo "[powerdown] cannot load module $1"
}

# module exists
has_mod() {
	modprobe -nq "$1"
}

# module loaded
mod_loaded() {
	grep -qs "^$1 " /proc/modules
}

# brightness scale 0 to 5
brightness_scale() {
  local scale="$(echo "scale=0; $(cat /sys/class/backlight/acpi_video0/max_brightness) / 5" | bc)"
  echo "$(( $scale * $1 ))"
}

# command
run() {
  "$@" &> /dev/null || echo "[powerdown] cannot run $@"
}

# get current power usage
display_power() {
  if [[ "$(find /sys/class/power_supply -name BAT*)" == "" ]]; then
    echo "[powerdown] no battery"
    return
  fi
  for bat in /sys/class/power_supply/BAT*; do
	local watt
    if [[ -f "$bat/power_now" ]]; then
      watt="$(echo "scale=3; $(cat "$bat"/power_now) / 1000000" | bc)"
    else
      watt="$(echo "scale=3; $(cat "$bat"/current_now) / 1000000" | bc)"
    fi
    echo "[powerdown] $(basename "$bat") using $watt watts"
  done
  if [[ -f /usr/bin/acpi ]]; then
    acpi
  fi
}

# get readahead
display_readahead() {
	echo " -> $1 readahead: $(blockdev --getra "$1")"
}

# dump kernel option content
dump () {
	[[ -w "$1" && -r "$1" ]] || return
	echo " -> $1: $(cat $1)"
}

display_module() {
	has_mod "$1" || return
	echo -n " -> $1 "
	mod_loaded "$1" && echo "loaded" || echo "not loaded"
}

display_wireless() {
	echo " -> $1 $(iw dev "$1" get power_save)"
}

hibernate_offset() {
	filefrag -v /hibernate | awk 'NR==4 {print $3}'
}

root_part() {
	df / | awk 'NR==2 {print $1}'
}

has_swap_part () {
	grep -qs swap /etc/fstab
}

can_suspend_to_disk () {
    [[ -f /hibernate ]] || has_swap_part
}

swap_part() {
    awk '/swap/ {print $1; exit}' /etc/fstab
}

resume_boot_option() {
    if [[ -f /hibernate ]]; then
        echo "resume=$(root_part) resume_offset=$(hibernate_offset)"
    elif has_swap_part; then
        echo "resume=$(swap_part)"
    fi
}

# lock the file until the script finishes
lock() {
    LOCK=/tmp/powerdown.lock
    if [[ -f "$LOCK" ]]; then
        echo "Working... $LOCK"
        exit
    fi
    : > "$LOCK"
    trap "rm -f $LOCK; exit" EXIT
}
